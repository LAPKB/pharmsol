searchState.loadedDescShard("pharmsol", 0, "A hash map implemented with quadratic probing and SIMD …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nConstruct a dynamic matrix directly from data.\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nExamples\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Covariate is a collection of CovariateSegments, which …\nA CovariateSegment is a segment of the piece-wise …\nCovariates is a collection of Covariate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn instantaenous input of drug\nAn Event can be a Bolus, Infusion, or Observation\nA continuous dose of drug\nAn observation of drug concentration or covariates\nGet the amount of the bolus, often the dose\nGet the total amount of drug provided over the infusion\nGet the duration of the infusion\nGet the error polynomial coefficients of the observation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet whether the observation should be ignored\nGet the input compartment of the bolus, i.e. the …\nGet the input compartment of the infusion, i.e. the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the output equation number of the observation\nGet the time of the bolus\nGet the start time of the infusion\nGet the time of the observation\nGet the value of the observation, e.g. drug concentration\nData is a collection of Subjects, which are collections of …\nAn Occasion is a collection of events, for a given Subject…\nSubject is a collection of blocks for one individual\nAdd a Subject to the Data\nExpand the data by adding observations at intervals of …\nFilter the Data to exclude the Subjects with IDs in the …\nFilter the Data to include only the Subjects with IDs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a vector of references to all Subjects in the Data\nGet the index of the occasion\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Data object from a vector of Subjects\nRead a Pmetrics datafile and convert it to a Data object\nPrediction holds an observation and its prediction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis closure represents an Analytical solution of the …\nThis closure represents the differential equation of the …\nThis closure represents the diffusion term of the model: …\nThis closure represents the drift term of the model: …\nThis closure represents the fraction absorbed (also called …\nThis closure represents the initial state of the system: …\nThis closure represents the lag time of the model, the lag …\nThe number of states and output equations of the model The …\nThis closure represents the output equation of the model: …\nThis closure represents the secondary equation of the …\nEstimate the likelihood of the subject given the support …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAnalytical for one compartment Assumptions:\nAnalytical for one compartment with absorption Assumptions:\nAnalytical for two compartment Assumptions:\nAnalytical for two compartment with absorption Assumptions:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")