searchState.loadedDescShard("pharmsol", 0, "A hash map implemented with quadratic probing and SIMD …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nData structures and utilities for pharmacometric modeling\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nConstruct a dynamic matrix directly from data.\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nBuilder for creating Subject instances with a fluent API\nExtension trait for creating Subject instances using the …\nAdd a bolus dosing event\nFinalize and build the Subject\nCreate a new SubjectBuilder with the specified ID\nAdd a covariate value at a specific time\nAdd an event to the current occasion\nReturns the argument unchanged.\nAdd an infusion event\nCalls <code>U::from(self)</code>.\nAdd an observation event\nAdd an observation with error model parameters and ignore …\nRepeat the last event <code>n</code> times, separated by some interval …\nComplete the current occasion and start a new one\nConstant value carried forward\nA time-varying covariate consisting of multiple segments\nA segment of a piecewise interpolation function for a …\nA collection of named covariates\nMethod used to interpolate covariate values between …\nLinear interpolation between two points with slope and …\nGet all covariates in this collection\nReturns the argument unchanged.\nGet the start time of the segment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific covariate by name\nInterpolate the covariate value at a specific time\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the interpolation method used in this segment\nGet the name of the covariate\nCreate a new empty collection of covariates\nGet all segments in this covariate\nGet the end time of the segment\nConvert all covariates to a HashMap of values at a …\nAdditive error model, where error is independent of …\nModel for calculating observation errors in pharmacometric …\nTypes of error models for pharmacometric observations\nProportional error model, where error scales with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gamma parameter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error model\nRepresents an instantaneous input of drug\nA bolus dose (instantaneous drug input)\nRepresents a pharmacokinetic/pharmacodynamic event\nRepresents a continuous dose of drug over time\nAn infusion (continuous drug input over a duration)\nRepresents an observation of drug concentration or other …\nAn observation of drug concentration or other measure\nGet the amount of drug in the bolus\nGet the total amount of drug provided over the infusion\nGet the duration of the infusion\nGet the error polynomial coefficients (c0, c1, c2, c3) if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if this observation should be ignored in calculations\nGet the compartment number (zero-indexed) that receives …\nGet the compartment number (zero-indexed) that receives …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the output equation number (zero-indexed) …\nGet the time of the bolus administration\nGet the start time of the infusion\nGet the time of the observation\nGet the value of the observation (e.g., drug concentration)\nThe main data container for …\nAn occasion within a subject’s dataset\nA subject in a pharmacometric dataset\nAdd a subject to the dataset\nGet a vector of references to all events in this occasion\nExpand the dataset by adding observations at regular time …\nFilter the dataset to exclude subjects with specific IDs\nFilter the dataset to include only subjects with specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new subject from one or more occasions\nGet the covariates for this occasion\nGet events with modifications for lag time and …\nGet a specific subject by ID\nGet a vector of references to all subjects in the dataset\nGet the ID of the subject\nGet the index of the occasion\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Data</code> object from a vector of <code>Subject</code>s\nGet a vector of references to all occasions for this …\nWrite the dataset to a file in Pmetrics format\nRead a Pmetrics datafile and convert it to a Data object\nContainer for predictions across a population of subjects.\nPrediction holds an observation and its prediction\nContainer for predictions associated with a single subject.\nCalculate the absolute error |prediction - observation|.\nAdd a new prediction to the collection.\nGet the error polynomial coefficients, if available.\nGet a vector of all observation values.\nGet a vector of all prediction values.\nGet a vector of all time points.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate the likelihood of the predictions given an error …\nCalculate the likelihood of this prediction given an error …\nGet the observed value.\nGet the output equation index.\nCalculate the percentage error as (prediction - …\nGet the predicted value.\nCalculate the raw prediction error (prediction - …\nCalculate the psi matrix for maximum likelihood estimation.\nCalculate the squared error (prediction - observation)².\nGet the state vector at this prediction point.\n2D array of subject predictions\nGet the time point of this prediction.\nThis closure represents an Analytical solution of the …\nThis closure represents the differential equation of the …\nThis closure represents the diffusion term of a stochastic …\nThis closure represents the drift term of a stochastic …\nThis closure represents the fraction absorbed (also called …\nThis closure represents the initial state of the system.\nThis closure represents the lag time of the model.\nType alias for matrix type used in simulations\nThe number of states and output equations of the model.\nThis closure represents the output equation of the model.\nThis closure represents the secondary equation of the …\nType alias for floating point values used in simulations\nType alias for state vector type used in simulations\nAdds a bolus dose to the specified input compartment in …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nTrait for model equations that can be simulated.\nTrait defining the associated types for equations.\nThe predictions container type\nTrait for prediction containers.\nThe state vector type\nTrait for state vectors that can receive bolus doses.\nAdd a bolus dose to the state at the specified input …\nEstimate the likelihood of the subject given the support …\nGenerate predictions for a subject with given parameters.\nGet all predictions as a vector.\nCreate a new prediction container with specified capacity.\nSimulate a subject with given parameters and optionally …\nCalculate the sum of squared errors for all predictions.\nModel equation using analytical solutions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Analytical equation model.\nAnalytical solution for one compartment model.\nAnalytical solution for one compartment model with …\nAnalytical solution for two compartment model.\nAnalytical solution for two compartment model with …\nModel metadata container.\nReturns the argument unchanged.\nRetrieves the parameter names stored in this metadata …\nCalls <code>U::from(self)</code>.\nCreates a new metadata container with the specified …\nModel equation implementation using ordinary differential …\nEstimates the likelihood of observed data given a model …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new ODE equation model.\nStochastic Differential Equation solver for pharmacometric …\nEstimates the likelihood of observed data given a model …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stochastic differential equation solver.\nTrait for estimating the theta parameter for a dataset\nTrait for finding the optimal support point for a subject\nEstimates the theta parameter for a dataset\nFinds the optimal support point for a subject")